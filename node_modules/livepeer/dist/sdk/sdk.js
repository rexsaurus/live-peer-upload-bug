"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Livepeer = exports.SDKConfiguration = exports.ServerList = void 0;
var components = __importStar(require("../models/components"));
var accesscontrol_1 = require("./accesscontrol");
var asset_1 = require("./asset");
var metrics_1 = require("./metrics");
var multistreamtarget_1 = require("./multistreamtarget");
var playback_1 = require("./playback");
var session_1 = require("./session");
var stream_1 = require("./stream");
var task_1 = require("./task");
var transcode_1 = require("./transcode");
var webhook_1 = require("./webhook");
var axios_1 = __importDefault(require("axios"));
/**
 * Contains the list of servers available to the SDK
 */
exports.ServerList = ["https://livepeer.studio/api"];
var SDKConfiguration = /** @class */ (function () {
    function SDKConfiguration(init) {
        this.language = "typescript";
        this.openapiDocVersion = "1.0.0";
        this.sdkVersion = "3.0.0";
        this.genVersion = "2.188.1";
        this.userAgent = "speakeasy-sdk/typescript 3.0.0 2.188.1 1.0.0 livepeer";
        Object.assign(this, init);
    }
    return SDKConfiguration;
}());
exports.SDKConfiguration = SDKConfiguration;
/**
 * Livepeer API Reference: Welcome to the Livepeer API reference docs. Here you will find all the
 *
 * @remarks
 * endpoints exposed on the standard Livepeer API, learn how to use them and
 * what they return.
 *
 */
var Livepeer = /** @class */ (function () {
    function Livepeer(props) {
        var _a, _b;
        var serverURL = props === null || props === void 0 ? void 0 : props.serverURL;
        var serverIdx = (_a = props === null || props === void 0 ? void 0 : props.serverIdx) !== null && _a !== void 0 ? _a : 0;
        if (!serverURL) {
            serverURL = exports.ServerList[serverIdx];
        }
        var defaultClient = (_b = props === null || props === void 0 ? void 0 : props.defaultClient) !== null && _b !== void 0 ? _b : axios_1.default.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new components.Security({ apiKey: props === null || props === void 0 ? void 0 : props.apiKey }),
            serverURL: serverURL,
            retryConfig: props === null || props === void 0 ? void 0 : props.retryConfig,
        });
        this.stream = new stream_1.Stream(this.sdkConfiguration);
        this.multistreamTarget = new multistreamtarget_1.MultistreamTarget(this.sdkConfiguration);
        this.webhook = new webhook_1.Webhook(this.sdkConfiguration);
        this.asset = new asset_1.Asset(this.sdkConfiguration);
        this.metrics = new metrics_1.Metrics(this.sdkConfiguration);
        this.session = new session_1.Session(this.sdkConfiguration);
        this.accessControl = new accesscontrol_1.AccessControl(this.sdkConfiguration);
        this.task = new task_1.Task(this.sdkConfiguration);
        this.transcode = new transcode_1.Transcode(this.sdkConfiguration);
        this.playback = new playback_1.Playback(this.sdkConfiguration);
    }
    return Livepeer;
}());
exports.Livepeer = Livepeer;
