import * as utils from "../internal/utils";
import * as components from "../models/components";
import { AccessControl } from "./accesscontrol";
import { Asset } from "./asset";
import { Metrics } from "./metrics";
import { MultistreamTarget } from "./multistreamtarget";
import { Playback } from "./playback";
import { Session } from "./session";
import { Stream } from "./stream";
import { Task } from "./task";
import { Transcode } from "./transcode";
import { Webhook } from "./webhook";
import { AxiosInstance } from "axios";
/**
 * Contains the list of servers available to the SDK
 */
export declare const ServerList: readonly ["https://livepeer.studio/api"];
/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    apiKey?: string;
    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;
    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;
    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};
export declare class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: components.Security | (() => Promise<components.Security>);
    serverURL: string;
    serverDefaults: any;
    language: string;
    openapiDocVersion: string;
    sdkVersion: string;
    genVersion: string;
    userAgent: string;
    retryConfig?: utils.RetryConfig;
    constructor(init?: Partial<SDKConfiguration>);
}
/**
 * Livepeer API Reference: Welcome to the Livepeer API reference docs. Here you will find all the
 *
 * @remarks
 * endpoints exposed on the standard Livepeer API, learn how to use them and
 * what they return.
 *
 */
export declare class Livepeer {
    stream: Stream;
    multistreamTarget: MultistreamTarget;
    webhook: Webhook;
    asset: Asset;
    metrics: Metrics;
    session: Session;
    accessControl: AccessControl;
    task: Task;
    transcode: Transcode;
    playback: Playback;
    private sdkConfiguration;
    constructor(props?: SDKProps);
}
