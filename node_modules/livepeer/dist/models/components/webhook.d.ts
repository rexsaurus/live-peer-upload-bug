import { SpeakeasyBase } from "../../internal/utils";
export declare enum Events {
    StreamStarted = "stream.started",
    StreamDetection = "stream.detection",
    StreamIdle = "stream.idle",
    RecordingReady = "recording.ready",
    RecordingStarted = "recording.started",
    RecordingWaiting = "recording.waiting",
    MultistreamConnected = "multistream.connected",
    MultistreamError = "multistream.error",
    MultistreamDisconnected = "multistream.disconnected",
    PlaybackUserNew = "playback.user.new",
    PlaybackAccessControl = "playback.accessControl",
    AssetCreated = "asset.created",
    AssetUpdated = "asset.updated",
    AssetFailed = "asset.failed",
    AssetReady = "asset.ready",
    AssetDeleted = "asset.deleted",
    TaskSpawned = "task.spawned",
    TaskUpdated = "task.updated",
    TaskCompleted = "task.completed",
    TaskFailed = "task.failed"
}
/**
 * failure timestamp and error message with status code
 */
export declare class LastFailure extends SpeakeasyBase {
    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    timestamp?: number;
    /**
     * Webhook failure error message
     */
    error?: string;
    /**
     * Webhook failure response
     */
    response?: string;
    /**
     * Webhook failure status code
     */
    statusCode?: number;
}
/**
 * status of webhook
 */
export declare class Status extends SpeakeasyBase {
    /**
     * failure timestamp and error message with status code
     */
    lastFailure?: LastFailure;
    /**
     * Timestamp (in milliseconds) at which the webhook last was
     *
     * @remarks
     * triggered
     *
     */
    lastTriggeredAt?: number;
}
export declare class Webhook extends SpeakeasyBase {
    id?: string;
    name: string;
    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    createdAt?: number;
    events?: Events[];
    url: string;
    /**
     * streamId of the stream on which the webhook is applied
     */
    streamId?: string;
    /**
     * status of webhook
     */
    status?: Status;
}
