import { SpeakeasyBase } from "../../internal/utils";
import { IpfsFileInfo } from "./ipfsfileinfo";
import { PlaybackPolicy } from "./playbackpolicy";
import { StorageStatus } from "./storagestatus";
/**
 * Type of the asset.
 */
export declare enum AssetType {
    Video = "video",
    Audio = "audio"
}
/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 *
 */
export declare enum AssetNftMetadataTemplate {
    File = "file",
    Player = "player"
}
/**
 * Additional data to add to the NFT metadata exported to
 *
 * @remarks
 * IPFS. Will be deep merged with the default metadata
 * exported.
 *
 */
export declare class AssetNftMetadata extends SpeakeasyBase {
}
export declare class AssetSpec extends SpeakeasyBase {
    /**
     * Name of the NFT metadata template to export. 'player'
     *
     * @remarks
     * will embed the Livepeer Player on the NFT while 'file'
     * will reference only the immutable MP4 files.
     *
     */
    nftMetadataTemplate?: AssetNftMetadataTemplate;
    /**
     * Additional data to add to the NFT metadata exported to
     *
     * @remarks
     * IPFS. Will be deep merged with the default metadata
     * exported.
     *
     */
    nftMetadata?: AssetNftMetadata;
}
export declare class Ipfs extends SpeakeasyBase {
    spec?: AssetSpec;
    /**
     * CID of the file on IPFS
     */
    cid?: string;
    /**
     * URL with IPFS scheme for the file
     */
    url?: string;
    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    gatewayUrl?: string;
    nftMetadata?: IpfsFileInfo;
    /**
     * Timestamp (in milliseconds) at which IPFS export task was
     *
     * @remarks
     * updated
     *
     */
    updatedAt?: number;
}
export declare class AssetStorage extends SpeakeasyBase {
    ipfs?: Ipfs;
    status?: StorageStatus;
}
/**
 * Phase of the asset
 */
export declare enum AssetPhase {
    Uploading = "uploading",
    Waiting = "waiting",
    Processing = "processing",
    Ready = "ready",
    Failed = "failed"
}
/**
 * Status of the asset
 */
export declare class AssetStatus extends SpeakeasyBase {
    /**
     * Phase of the asset
     */
    phase: AssetPhase;
    /**
     * Timestamp (in milliseconds) at which the asset was last updated
     */
    updatedAt: number;
    /**
     * Current progress of the task creating this asset.
     */
    progress?: number;
    /**
     * Error message if the asset creation failed.
     */
    errorMessage?: string;
}
export declare class Hash extends SpeakeasyBase {
    /**
     * Hash of the asset
     */
    hash?: string;
    /**
     * Hash algorithm used to compute the hash
     */
    algorithm?: string;
}
/**
 * type of track
 */
export declare enum AssetSchemasType {
    Video = "video",
    Audio = "audio"
}
export declare class Tracks extends SpeakeasyBase {
    /**
     * type of track
     */
    type: AssetSchemasType;
    /**
     * Codec of the track
     */
    codec: string;
    /**
     * Start time of the track in seconds
     */
    startTime?: number;
    /**
     * Duration of the track in seconds
     */
    duration?: number;
    /**
     * Bitrate of the track in bits per second
     */
    bitrate?: number;
    /**
     * Width of the track - only for video tracks
     */
    width?: number;
    /**
     * Height of the track - only for video tracks
     */
    height?: number;
    /**
     * Pixel format of the track - only for video tracks
     */
    pixelFormat?: string;
    /**
     * Frame rate of the track - only for video tracks
     */
    fps?: number;
    /**
     * Amount of audio channels in the track
     */
    channels?: number;
    /**
     * Sample rate of the track in samples per second - only for
     *
     * @remarks
     * audio tracks
     *
     */
    sampleRate?: number;
    /**
     * Bit depth of the track - only for audio tracks
     */
    bitDepth?: number;
}
/**
 * Video metadata
 */
export declare class VideoSpec extends SpeakeasyBase {
    /**
     * Format of the asset
     */
    format?: string;
    /**
     * Duration of the asset in seconds (float)
     */
    duration?: number;
    /**
     * Bitrate of the video in bits per second
     */
    bitrate?: number;
    /**
     * List of tracks associated with the asset when the format
     *
     * @remarks
     * contemplates them (e.g. mp4)
     *
     */
    tracks?: Tracks[];
}
export declare class Asset extends SpeakeasyBase {
    id: string;
    /**
     * Type of the asset.
     */
    type?: AssetType;
    /**
     * Used to form playback URL and storage folder
     */
    playbackId?: string;
    /**
     * URL for HLS playback
     */
    playbackUrl?: string;
    /**
     * URL to manually download the asset if desired
     */
    downloadUrl?: string;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy;
    source: any;
    creatorId?: any;
    storage?: AssetStorage;
    /**
     * Status of the asset
     */
    status?: AssetStatus;
    /**
     * Name of the asset. This is not necessarily the filename, can be a
     *
     * @remarks
     * custom name or title
     *
     */
    name: string;
    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    createdAt?: number;
    /**
     * Size of the asset in bytes
     */
    size?: number;
    /**
     * Hash of the asset
     */
    hash?: Hash[];
    /**
     * Video metadata
     */
    videoSpec?: VideoSpec;
}
