import { SpeakeasyBase } from "../../internal/utils";
import { FfmpegProfile } from "./ffmpegprofile";
import { PlaybackPolicy } from "./playbackpolicy";
export declare class StreamTargets extends SpeakeasyBase {
    /**
     * Name of the transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing the source stream data
     *
     */
    profile: string;
    /**
     * If true, the stream audio will be muted, and only silent
     *
     * @remarks
     * video will be pushed to the target.
     *
     */
    videoOnly?: boolean;
    /**
     * ID of the multistream target object where to push this stream
     */
    id?: string;
}
export declare class StreamMultistream extends SpeakeasyBase {
    /**
     * References to targets where this stream will be simultaneously
     *
     * @remarks
     * streamed to
     *
     */
    targets?: StreamTargets[];
}
export declare class Stream extends SpeakeasyBase {
    id?: string;
    name: string;
    creatorId?: any;
    lastSeen?: number;
    sourceSegments?: number;
    transcodedSegments?: number;
    /**
     * Duration of all the source segments, sec
     */
    sourceSegmentsDuration?: number;
    /**
     * Duration of all the transcoded segments, sec
     */
    transcodedSegmentsDuration?: number;
    sourceBytes?: number;
    transcodedBytes?: number;
    /**
     * Rate at which sourceBytes increases (bytes/second)
     */
    ingestRate?: number;
    /**
     * Rate at which transcodedBytes increases (bytes/second)
     */
    outgoingRate?: number;
    /**
     * If currently active
     */
    isActive?: boolean;
    /**
     * Indicates whether the stream is healthy or not.
     */
    isHealthy?: boolean;
    /**
     * A string array of human-readable errors describing issues affecting
     *
     * @remarks
     * the stream, if any.
     *
     */
    issues?: string[];
    /**
     * Name of the token used to create this object
     */
    createdByTokenName?: string;
    /**
     * Timestamp (in milliseconds) at which the stream object was created
     */
    createdAt?: number;
    /**
     * Points to the parent stream object
     */
    parentId?: string;
    /**
     * Used to form the RTMP ingest URL
     */
    streamKey?: string;
    /**
     * Used to form playback URL
     */
    playbackId?: string;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy;
    profiles?: FfmpegProfile[];
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    record?: boolean;
    multistream?: StreamMultistream;
    /**
     * If currently suspended
     */
    suspended?: boolean;
}
