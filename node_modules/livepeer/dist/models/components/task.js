"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskInput = exports.TaskOutput = exports.TaskExport = exports.TaskIpfsInput = exports.Params = exports.TaskUpload = exports.Task = exports.Output = exports.TaskTranscode = exports.TaskExportData = exports.TaskSchemasIpfs = exports.Export = exports.TaskIpfs = exports.TaskStatus = exports.TaskPhase = exports.Clip = exports.CatalystPipelineStrategy = exports.ClipStrategy = exports.TaskParams = exports.TranscodeFile = exports.Outputs = exports.Mp4 = exports.Hls = exports.TaskStorage = exports.Input = exports.Transcode = exports.ExportData = exports.Content = exports.TaskUploadOutput = exports.TaskType = void 0;
var utils_1 = require("../../internal/utils");
var encryption_1 = require("./encryption");
var encryptionoutput_1 = require("./encryptionoutput");
var ffmpegprofile_1 = require("./ffmpegprofile");
var ipfsexportparams_1 = require("./ipfsexportparams");
var upload_1 = require("./upload");
var uploadoutput_1 = require("./uploadoutput");
var class_transformer_1 = require("class-transformer");
/**
 * Type of the task
 */
var TaskType;
(function (TaskType) {
    TaskType["Upload"] = "upload";
    TaskType["Import"] = "import";
    TaskType["Export"] = "export";
    TaskType["ExportData"] = "export-data";
    TaskType["Transcode"] = "transcode";
    TaskType["TranscodeFile"] = "transcode-file";
    TaskType["Clip"] = "clip";
})(TaskType = exports.TaskType || (exports.TaskType = {}));
/**
 * Parameters for the upload task
 */
var TaskUploadOutput = /** @class */ (function (_super) {
    __extends(TaskUploadOutput, _super);
    function TaskUploadOutput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], TaskUploadOutput.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryption" }),
        (0, class_transformer_1.Type)(function () { return encryptionoutput_1.EncryptionOutput; }),
        __metadata("design:type", encryptionoutput_1.EncryptionOutput)
    ], TaskUploadOutput.prototype, "encryption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recordedSessionId" }),
        __metadata("design:type", String)
    ], TaskUploadOutput.prototype, "recordedSessionId", void 0);
    return TaskUploadOutput;
}(utils_1.SpeakeasyBase));
exports.TaskUploadOutput = TaskUploadOutput;
/**
 * File content to store into IPFS
 */
var Content = /** @class */ (function (_super) {
    __extends(Content, _super);
    function Content() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Content;
}(utils_1.SpeakeasyBase));
exports.Content = Content;
/**
 * Parameters for the export-data task
 */
var ExportData = /** @class */ (function (_super) {
    __extends(ExportData, _super);
    function ExportData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "content" }),
        (0, class_transformer_1.Type)(function () { return Content; }),
        __metadata("design:type", Content)
    ], ExportData.prototype, "content", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipfs" }),
        (0, class_transformer_1.Type)(function () { return ipfsexportparams_1.IpfsExportParams; }),
        __metadata("design:type", ipfsexportparams_1.IpfsExportParams)
    ], ExportData.prototype, "ipfs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], ExportData.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], ExportData.prototype, "id", void 0);
    return ExportData;
}(utils_1.SpeakeasyBase));
exports.ExportData = ExportData;
/**
 * Parameters for the transcode task
 */
var Transcode = /** @class */ (function (_super) {
    __extends(Transcode, _super);
    function Transcode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "profile" }),
        (0, class_transformer_1.Type)(function () { return ffmpegprofile_1.FfmpegProfile; }),
        __metadata("design:type", ffmpegprofile_1.FfmpegProfile)
    ], Transcode.prototype, "profile", void 0);
    return Transcode;
}(utils_1.SpeakeasyBase));
exports.Transcode = Transcode;
/**
 * Input video file to transcode
 */
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Input.prototype, "url", void 0);
    return Input;
}(utils_1.SpeakeasyBase));
exports.Input = Input;
/**
 * Storage for the output files
 */
var TaskStorage = /** @class */ (function (_super) {
    __extends(TaskStorage, _super);
    function TaskStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], TaskStorage.prototype, "url", void 0);
    return TaskStorage;
}(utils_1.SpeakeasyBase));
exports.TaskStorage = TaskStorage;
/**
 * HLS output format
 */
var Hls = /** @class */ (function (_super) {
    __extends(Hls, _super);
    function Hls() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "path" }),
        __metadata("design:type", String)
    ], Hls.prototype, "path", void 0);
    return Hls;
}(utils_1.SpeakeasyBase));
exports.Hls = Hls;
/**
 * MP4 output format
 */
var Mp4 = /** @class */ (function (_super) {
    __extends(Mp4, _super);
    function Mp4() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "path" }),
        __metadata("design:type", String)
    ], Mp4.prototype, "path", void 0);
    return Mp4;
}(utils_1.SpeakeasyBase));
exports.Mp4 = Mp4;
/**
 * Output formats
 */
var Outputs = /** @class */ (function (_super) {
    __extends(Outputs, _super);
    function Outputs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hls" }),
        (0, class_transformer_1.Type)(function () { return Hls; }),
        __metadata("design:type", Hls)
    ], Outputs.prototype, "hls", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "mp4" }),
        (0, class_transformer_1.Type)(function () { return Mp4; }),
        __metadata("design:type", Mp4)
    ], Outputs.prototype, "mp4", void 0);
    return Outputs;
}(utils_1.SpeakeasyBase));
exports.Outputs = Outputs;
/**
 * Parameters for the transcode-file task
 */
var TranscodeFile = /** @class */ (function (_super) {
    __extends(TranscodeFile, _super);
    function TranscodeFile() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "input" }),
        (0, class_transformer_1.Type)(function () { return Input; }),
        __metadata("design:type", Input)
    ], TranscodeFile.prototype, "input", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "storage" }),
        (0, class_transformer_1.Type)(function () { return TaskStorage; }),
        __metadata("design:type", TaskStorage)
    ], TranscodeFile.prototype, "storage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "outputs" }),
        (0, class_transformer_1.Type)(function () { return Outputs; }),
        __metadata("design:type", Outputs)
    ], TranscodeFile.prototype, "outputs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: ffmpegprofile_1.FfmpegProfile }),
        (0, class_transformer_1.Expose)({ name: "profiles" }),
        (0, class_transformer_1.Type)(function () { return ffmpegprofile_1.FfmpegProfile; }),
        __metadata("design:type", Array)
    ], TranscodeFile.prototype, "profiles", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "targetSegmentSizeSecs" }),
        __metadata("design:type", Number)
    ], TranscodeFile.prototype, "targetSegmentSizeSecs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creatorId" }),
        __metadata("design:type", Object)
    ], TranscodeFile.prototype, "creatorId", void 0);
    return TranscodeFile;
}(utils_1.SpeakeasyBase));
exports.TranscodeFile = TranscodeFile;
/**
 * Parameters of the task
 */
var TaskParams = /** @class */ (function (_super) {
    __extends(TaskParams, _super);
    function TaskParams() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "upload" }),
        (0, class_transformer_1.Type)(function () { return TaskUploadOutput; }),
        __metadata("design:type", TaskUploadOutput)
    ], TaskParams.prototype, "upload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import" }),
        (0, class_transformer_1.Type)(function () { return uploadoutput_1.UploadOutput; }),
        __metadata("design:type", uploadoutput_1.UploadOutput)
    ], TaskParams.prototype, "import", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "export" }),
        __metadata("design:type", Object)
    ], TaskParams.prototype, "export", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportData" }),
        (0, class_transformer_1.Type)(function () { return ExportData; }),
        __metadata("design:type", ExportData)
    ], TaskParams.prototype, "exportData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode" }),
        (0, class_transformer_1.Type)(function () { return Transcode; }),
        __metadata("design:type", Transcode)
    ], TaskParams.prototype, "transcode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode-file" }),
        (0, class_transformer_1.Type)(function () { return TranscodeFile; }),
        __metadata("design:type", TranscodeFile)
    ], TaskParams.prototype, "transcodeFile", void 0);
    return TaskParams;
}(utils_1.SpeakeasyBase));
exports.TaskParams = TaskParams;
/**
 * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
var ClipStrategy = /** @class */ (function (_super) {
    __extends(ClipStrategy, _super);
    function ClipStrategy() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTime" }),
        __metadata("design:type", Number)
    ], ClipStrategy.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "endTime" }),
        __metadata("design:type", Number)
    ], ClipStrategy.prototype, "endTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "playbackId" }),
        __metadata("design:type", String)
    ], ClipStrategy.prototype, "playbackId", void 0);
    return ClipStrategy;
}(utils_1.SpeakeasyBase));
exports.ClipStrategy = ClipStrategy;
/**
 * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
var CatalystPipelineStrategy;
(function (CatalystPipelineStrategy) {
    CatalystPipelineStrategy["Catalyst"] = "catalyst";
    CatalystPipelineStrategy["CatalystFfmpeg"] = "catalyst_ffmpeg";
    CatalystPipelineStrategy["BackgroundExternal"] = "background_external";
    CatalystPipelineStrategy["BackgroundMist"] = "background_mist";
    CatalystPipelineStrategy["FallbackExternal"] = "fallback_external";
    CatalystPipelineStrategy["External"] = "external";
})(CatalystPipelineStrategy = exports.CatalystPipelineStrategy || (exports.CatalystPipelineStrategy = {}));
var Clip = /** @class */ (function (_super) {
    __extends(Clip, _super);
    function Clip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Clip.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clipStrategy" }),
        (0, class_transformer_1.Type)(function () { return ClipStrategy; }),
        __metadata("design:type", ClipStrategy)
    ], Clip.prototype, "clipStrategy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "catalystPipelineStrategy" }),
        __metadata("design:type", String)
    ], Clip.prototype, "catalystPipelineStrategy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sessionId" }),
        __metadata("design:type", String)
    ], Clip.prototype, "sessionId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "inputId" }),
        __metadata("design:type", String)
    ], Clip.prototype, "inputId", void 0);
    return Clip;
}(utils_1.SpeakeasyBase));
exports.Clip = Clip;
/**
 * Phase of the task
 */
var TaskPhase;
(function (TaskPhase) {
    TaskPhase["Pending"] = "pending";
    TaskPhase["Waiting"] = "waiting";
    TaskPhase["Running"] = "running";
    TaskPhase["Failed"] = "failed";
    TaskPhase["Completed"] = "completed";
    TaskPhase["Cancelled"] = "cancelled";
})(TaskPhase = exports.TaskPhase || (exports.TaskPhase = {}));
/**
 * Status of the task
 */
var TaskStatus = /** @class */ (function (_super) {
    __extends(TaskStatus, _super);
    function TaskStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "phase" }),
        __metadata("design:type", String)
    ], TaskStatus.prototype, "phase", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        __metadata("design:type", Number)
    ], TaskStatus.prototype, "updatedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "progress" }),
        __metadata("design:type", Number)
    ], TaskStatus.prototype, "progress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "errorMessage" }),
        __metadata("design:type", String)
    ], TaskStatus.prototype, "errorMessage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "retries" }),
        __metadata("design:type", Number)
    ], TaskStatus.prototype, "retries", void 0);
    return TaskStatus;
}(utils_1.SpeakeasyBase));
exports.TaskStatus = TaskStatus;
var TaskIpfs = /** @class */ (function (_super) {
    __extends(TaskIpfs, _super);
    function TaskIpfs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "videoFileCid" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "videoFileCid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "videoFileUrl" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "videoFileUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "videoFileGatewayUrl" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "videoFileGatewayUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadataCid" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "nftMetadataCid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadataUrl" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "nftMetadataUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadataGatewayUrl" }),
        __metadata("design:type", String)
    ], TaskIpfs.prototype, "nftMetadataGatewayUrl", void 0);
    return TaskIpfs;
}(utils_1.SpeakeasyBase));
exports.TaskIpfs = TaskIpfs;
/**
 * Output of the export task
 */
var Export = /** @class */ (function (_super) {
    __extends(Export, _super);
    function Export() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipfs" }),
        (0, class_transformer_1.Type)(function () { return TaskIpfs; }),
        __metadata("design:type", TaskIpfs)
    ], Export.prototype, "ipfs", void 0);
    return Export;
}(utils_1.SpeakeasyBase));
exports.Export = Export;
var TaskSchemasIpfs = /** @class */ (function (_super) {
    __extends(TaskSchemasIpfs, _super);
    function TaskSchemasIpfs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cid" }),
        __metadata("design:type", String)
    ], TaskSchemasIpfs.prototype, "cid", void 0);
    return TaskSchemasIpfs;
}(utils_1.SpeakeasyBase));
exports.TaskSchemasIpfs = TaskSchemasIpfs;
/**
 * Output of the export data task
 */
var TaskExportData = /** @class */ (function (_super) {
    __extends(TaskExportData, _super);
    function TaskExportData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipfs" }),
        (0, class_transformer_1.Type)(function () { return TaskSchemasIpfs; }),
        __metadata("design:type", TaskSchemasIpfs)
    ], TaskExportData.prototype, "ipfs", void 0);
    return TaskExportData;
}(utils_1.SpeakeasyBase));
exports.TaskExportData = TaskExportData;
var TaskTranscode = /** @class */ (function (_super) {
    __extends(TaskTranscode, _super);
    function TaskTranscode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "asset" }),
        __metadata("design:type", Object)
    ], TaskTranscode.prototype, "asset", void 0);
    return TaskTranscode;
}(utils_1.SpeakeasyBase));
exports.TaskTranscode = TaskTranscode;
/**
 * Output of the task
 */
var Output = /** @class */ (function (_super) {
    __extends(Output, _super);
    function Output() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "upload" }),
        __metadata("design:type", Object)
    ], Output.prototype, "upload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import" }),
        __metadata("design:type", Object)
    ], Output.prototype, "import", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "export" }),
        (0, class_transformer_1.Type)(function () { return Export; }),
        __metadata("design:type", Export)
    ], Output.prototype, "export", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportData" }),
        (0, class_transformer_1.Type)(function () { return TaskExportData; }),
        __metadata("design:type", TaskExportData)
    ], Output.prototype, "exportData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode" }),
        (0, class_transformer_1.Type)(function () { return TaskTranscode; }),
        __metadata("design:type", TaskTranscode)
    ], Output.prototype, "transcode", void 0);
    return Output;
}(utils_1.SpeakeasyBase));
exports.Output = Output;
var Task = /** @class */ (function (_super) {
    __extends(Task, _super);
    function Task() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Task.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Task.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", Number)
    ], Task.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "scheduledAt" }),
        __metadata("design:type", Number)
    ], Task.prototype, "scheduledAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "inputAssetId" }),
        __metadata("design:type", String)
    ], Task.prototype, "inputAssetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "outputAssetId" }),
        __metadata("design:type", String)
    ], Task.prototype, "outputAssetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "params" }),
        (0, class_transformer_1.Type)(function () { return TaskParams; }),
        __metadata("design:type", TaskParams)
    ], Task.prototype, "params", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clip" }),
        (0, class_transformer_1.Type)(function () { return Clip; }),
        __metadata("design:type", Clip)
    ], Task.prototype, "clip", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        (0, class_transformer_1.Type)(function () { return TaskStatus; }),
        __metadata("design:type", TaskStatus)
    ], Task.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "output" }),
        (0, class_transformer_1.Type)(function () { return Output; }),
        __metadata("design:type", Output)
    ], Task.prototype, "output", void 0);
    return Task;
}(utils_1.SpeakeasyBase));
exports.Task = Task;
/**
 * Parameters for the upload task
 */
var TaskUpload = /** @class */ (function (_super) {
    __extends(TaskUpload, _super);
    function TaskUpload() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], TaskUpload.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "encryption" }),
        (0, class_transformer_1.Type)(function () { return encryption_1.Encryption; }),
        __metadata("design:type", encryption_1.Encryption)
    ], TaskUpload.prototype, "encryption", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "recordedSessionId" }),
        __metadata("design:type", String)
    ], TaskUpload.prototype, "recordedSessionId", void 0);
    return TaskUpload;
}(utils_1.SpeakeasyBase));
exports.TaskUpload = TaskUpload;
/**
 * Parameters of the task
 */
var Params = /** @class */ (function (_super) {
    __extends(Params, _super);
    function Params() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "upload" }),
        (0, class_transformer_1.Type)(function () { return TaskUpload; }),
        __metadata("design:type", TaskUpload)
    ], Params.prototype, "upload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import" }),
        (0, class_transformer_1.Type)(function () { return upload_1.Upload; }),
        __metadata("design:type", upload_1.Upload)
    ], Params.prototype, "import", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "export" }),
        __metadata("design:type", Object)
    ], Params.prototype, "export", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportData" }),
        (0, class_transformer_1.Type)(function () { return ExportData; }),
        __metadata("design:type", ExportData)
    ], Params.prototype, "exportData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode" }),
        (0, class_transformer_1.Type)(function () { return Transcode; }),
        __metadata("design:type", Transcode)
    ], Params.prototype, "transcode", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode-file" }),
        (0, class_transformer_1.Type)(function () { return TranscodeFile; }),
        __metadata("design:type", TranscodeFile)
    ], Params.prototype, "transcodeFile", void 0);
    return Params;
}(utils_1.SpeakeasyBase));
exports.Params = Params;
var TaskIpfsInput = /** @class */ (function (_super) {
    __extends(TaskIpfsInput, _super);
    function TaskIpfsInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "videoFileCid" }),
        __metadata("design:type", String)
    ], TaskIpfsInput.prototype, "videoFileCid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadataCid" }),
        __metadata("design:type", String)
    ], TaskIpfsInput.prototype, "nftMetadataCid", void 0);
    return TaskIpfsInput;
}(utils_1.SpeakeasyBase));
exports.TaskIpfsInput = TaskIpfsInput;
/**
 * Output of the export task
 */
var TaskExport = /** @class */ (function (_super) {
    __extends(TaskExport, _super);
    function TaskExport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipfs" }),
        (0, class_transformer_1.Type)(function () { return TaskIpfsInput; }),
        __metadata("design:type", TaskIpfsInput)
    ], TaskExport.prototype, "ipfs", void 0);
    return TaskExport;
}(utils_1.SpeakeasyBase));
exports.TaskExport = TaskExport;
/**
 * Output of the task
 */
var TaskOutput = /** @class */ (function (_super) {
    __extends(TaskOutput, _super);
    function TaskOutput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "upload" }),
        __metadata("design:type", Object)
    ], TaskOutput.prototype, "upload", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "import" }),
        __metadata("design:type", Object)
    ], TaskOutput.prototype, "import", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "export" }),
        (0, class_transformer_1.Type)(function () { return TaskExport; }),
        __metadata("design:type", TaskExport)
    ], TaskOutput.prototype, "export", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "exportData" }),
        (0, class_transformer_1.Type)(function () { return TaskExportData; }),
        __metadata("design:type", TaskExportData)
    ], TaskOutput.prototype, "exportData", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "transcode" }),
        (0, class_transformer_1.Type)(function () { return TaskTranscode; }),
        __metadata("design:type", TaskTranscode)
    ], TaskOutput.prototype, "transcode", void 0);
    return TaskOutput;
}(utils_1.SpeakeasyBase));
exports.TaskOutput = TaskOutput;
var TaskInput = /** @class */ (function (_super) {
    __extends(TaskInput, _super);
    function TaskInput() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], TaskInput.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "inputAssetId" }),
        __metadata("design:type", String)
    ], TaskInput.prototype, "inputAssetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "outputAssetId" }),
        __metadata("design:type", String)
    ], TaskInput.prototype, "outputAssetId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "params" }),
        (0, class_transformer_1.Type)(function () { return Params; }),
        __metadata("design:type", Params)
    ], TaskInput.prototype, "params", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "clip" }),
        (0, class_transformer_1.Type)(function () { return Clip; }),
        __metadata("design:type", Clip)
    ], TaskInput.prototype, "clip", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "output" }),
        (0, class_transformer_1.Type)(function () { return TaskOutput; }),
        __metadata("design:type", TaskOutput)
    ], TaskInput.prototype, "output", void 0);
    return TaskInput;
}(utils_1.SpeakeasyBase));
exports.TaskInput = TaskInput;
