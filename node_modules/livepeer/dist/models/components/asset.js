"use strict";
/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = exports.VideoSpec = exports.Tracks = exports.AssetSchemasType = exports.Hash = exports.AssetStatus = exports.AssetPhase = exports.AssetStorage = exports.Ipfs = exports.AssetSpec = exports.AssetNftMetadata = exports.AssetNftMetadataTemplate = exports.AssetType = void 0;
var utils_1 = require("../../internal/utils");
var ipfsfileinfo_1 = require("./ipfsfileinfo");
var playbackpolicy_1 = require("./playbackpolicy");
var storagestatus_1 = require("./storagestatus");
var class_transformer_1 = require("class-transformer");
/**
 * Type of the asset.
 */
var AssetType;
(function (AssetType) {
    AssetType["Video"] = "video";
    AssetType["Audio"] = "audio";
})(AssetType = exports.AssetType || (exports.AssetType = {}));
/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 *
 */
var AssetNftMetadataTemplate;
(function (AssetNftMetadataTemplate) {
    AssetNftMetadataTemplate["File"] = "file";
    AssetNftMetadataTemplate["Player"] = "player";
})(AssetNftMetadataTemplate = exports.AssetNftMetadataTemplate || (exports.AssetNftMetadataTemplate = {}));
/**
 * Additional data to add to the NFT metadata exported to
 *
 * @remarks
 * IPFS. Will be deep merged with the default metadata
 * exported.
 *
 */
var AssetNftMetadata = /** @class */ (function (_super) {
    __extends(AssetNftMetadata, _super);
    function AssetNftMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AssetNftMetadata;
}(utils_1.SpeakeasyBase));
exports.AssetNftMetadata = AssetNftMetadata;
var AssetSpec = /** @class */ (function (_super) {
    __extends(AssetSpec, _super);
    function AssetSpec() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadataTemplate" }),
        __metadata("design:type", String)
    ], AssetSpec.prototype, "nftMetadataTemplate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadata" }),
        (0, class_transformer_1.Type)(function () { return AssetNftMetadata; }),
        __metadata("design:type", AssetNftMetadata)
    ], AssetSpec.prototype, "nftMetadata", void 0);
    return AssetSpec;
}(utils_1.SpeakeasyBase));
exports.AssetSpec = AssetSpec;
var Ipfs = /** @class */ (function (_super) {
    __extends(Ipfs, _super);
    function Ipfs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "spec" }),
        (0, class_transformer_1.Type)(function () { return AssetSpec; }),
        __metadata("design:type", AssetSpec)
    ], Ipfs.prototype, "spec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "cid" }),
        __metadata("design:type", String)
    ], Ipfs.prototype, "cid", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "url" }),
        __metadata("design:type", String)
    ], Ipfs.prototype, "url", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "gatewayUrl" }),
        __metadata("design:type", String)
    ], Ipfs.prototype, "gatewayUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "nftMetadata" }),
        (0, class_transformer_1.Type)(function () { return ipfsfileinfo_1.IpfsFileInfo; }),
        __metadata("design:type", ipfsfileinfo_1.IpfsFileInfo)
    ], Ipfs.prototype, "nftMetadata", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        __metadata("design:type", Number)
    ], Ipfs.prototype, "updatedAt", void 0);
    return Ipfs;
}(utils_1.SpeakeasyBase));
exports.Ipfs = Ipfs;
var AssetStorage = /** @class */ (function (_super) {
    __extends(AssetStorage, _super);
    function AssetStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "ipfs" }),
        (0, class_transformer_1.Type)(function () { return Ipfs; }),
        __metadata("design:type", Ipfs)
    ], AssetStorage.prototype, "ipfs", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        (0, class_transformer_1.Type)(function () { return storagestatus_1.StorageStatus; }),
        __metadata("design:type", storagestatus_1.StorageStatus)
    ], AssetStorage.prototype, "status", void 0);
    return AssetStorage;
}(utils_1.SpeakeasyBase));
exports.AssetStorage = AssetStorage;
/**
 * Phase of the asset
 */
var AssetPhase;
(function (AssetPhase) {
    AssetPhase["Uploading"] = "uploading";
    AssetPhase["Waiting"] = "waiting";
    AssetPhase["Processing"] = "processing";
    AssetPhase["Ready"] = "ready";
    AssetPhase["Failed"] = "failed";
})(AssetPhase = exports.AssetPhase || (exports.AssetPhase = {}));
/**
 * Status of the asset
 */
var AssetStatus = /** @class */ (function (_super) {
    __extends(AssetStatus, _super);
    function AssetStatus() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "phase" }),
        __metadata("design:type", String)
    ], AssetStatus.prototype, "phase", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "updatedAt" }),
        __metadata("design:type", Number)
    ], AssetStatus.prototype, "updatedAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "progress" }),
        __metadata("design:type", Number)
    ], AssetStatus.prototype, "progress", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "errorMessage" }),
        __metadata("design:type", String)
    ], AssetStatus.prototype, "errorMessage", void 0);
    return AssetStatus;
}(utils_1.SpeakeasyBase));
exports.AssetStatus = AssetStatus;
var Hash = /** @class */ (function (_super) {
    __extends(Hash, _super);
    function Hash() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "hash" }),
        __metadata("design:type", String)
    ], Hash.prototype, "hash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "algorithm" }),
        __metadata("design:type", String)
    ], Hash.prototype, "algorithm", void 0);
    return Hash;
}(utils_1.SpeakeasyBase));
exports.Hash = Hash;
/**
 * type of track
 */
var AssetSchemasType;
(function (AssetSchemasType) {
    AssetSchemasType["Video"] = "video";
    AssetSchemasType["Audio"] = "audio";
})(AssetSchemasType = exports.AssetSchemasType || (exports.AssetSchemasType = {}));
var Tracks = /** @class */ (function (_super) {
    __extends(Tracks, _super);
    function Tracks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Tracks.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "codec" }),
        __metadata("design:type", String)
    ], Tracks.prototype, "codec", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "startTime" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "startTime", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bitrate" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "bitrate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "width" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "width", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "height" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "height", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "pixelFormat" }),
        __metadata("design:type", String)
    ], Tracks.prototype, "pixelFormat", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "fps" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "fps", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "channels" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "channels", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "sampleRate" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "sampleRate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bitDepth" }),
        __metadata("design:type", Number)
    ], Tracks.prototype, "bitDepth", void 0);
    return Tracks;
}(utils_1.SpeakeasyBase));
exports.Tracks = Tracks;
/**
 * Video metadata
 */
var VideoSpec = /** @class */ (function (_super) {
    __extends(VideoSpec, _super);
    function VideoSpec() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "format" }),
        __metadata("design:type", String)
    ], VideoSpec.prototype, "format", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "duration" }),
        __metadata("design:type", Number)
    ], VideoSpec.prototype, "duration", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "bitrate" }),
        __metadata("design:type", Number)
    ], VideoSpec.prototype, "bitrate", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: Tracks }),
        (0, class_transformer_1.Expose)({ name: "tracks" }),
        (0, class_transformer_1.Type)(function () { return Tracks; }),
        __metadata("design:type", Array)
    ], VideoSpec.prototype, "tracks", void 0);
    return VideoSpec;
}(utils_1.SpeakeasyBase));
exports.VideoSpec = VideoSpec;
var Asset = /** @class */ (function (_super) {
    __extends(Asset, _super);
    function Asset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "id" }),
        __metadata("design:type", String)
    ], Asset.prototype, "id", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "type" }),
        __metadata("design:type", String)
    ], Asset.prototype, "type", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "playbackId" }),
        __metadata("design:type", String)
    ], Asset.prototype, "playbackId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "playbackUrl" }),
        __metadata("design:type", String)
    ], Asset.prototype, "playbackUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "downloadUrl" }),
        __metadata("design:type", String)
    ], Asset.prototype, "downloadUrl", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "playbackPolicy" }),
        (0, class_transformer_1.Type)(function () { return playbackpolicy_1.PlaybackPolicy; }),
        __metadata("design:type", playbackpolicy_1.PlaybackPolicy)
    ], Asset.prototype, "playbackPolicy", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "source" }),
        __metadata("design:type", Object)
    ], Asset.prototype, "source", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "creatorId" }),
        __metadata("design:type", Object)
    ], Asset.prototype, "creatorId", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "storage" }),
        (0, class_transformer_1.Type)(function () { return AssetStorage; }),
        __metadata("design:type", AssetStorage)
    ], Asset.prototype, "storage", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "status" }),
        (0, class_transformer_1.Type)(function () { return AssetStatus; }),
        __metadata("design:type", AssetStatus)
    ], Asset.prototype, "status", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "name" }),
        __metadata("design:type", String)
    ], Asset.prototype, "name", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "createdAt" }),
        __metadata("design:type", Number)
    ], Asset.prototype, "createdAt", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "size" }),
        __metadata("design:type", Number)
    ], Asset.prototype, "size", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)({ elemType: Hash }),
        (0, class_transformer_1.Expose)({ name: "hash" }),
        (0, class_transformer_1.Type)(function () { return Hash; }),
        __metadata("design:type", Array)
    ], Asset.prototype, "hash", void 0);
    __decorate([
        (0, utils_1.SpeakeasyMetadata)(),
        (0, class_transformer_1.Expose)({ name: "videoSpec" }),
        (0, class_transformer_1.Type)(function () { return VideoSpec; }),
        __metadata("design:type", VideoSpec)
    ], Asset.prototype, "videoSpec", void 0);
    return Asset;
}(utils_1.SpeakeasyBase));
exports.Asset = Asset;
