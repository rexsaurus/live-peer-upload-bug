import { SpeakeasyBase } from "../../internal/utils";
/**
 * An individual metric about viewership of an asset. Necessarily, at least
 *
 * @remarks
 * 1 of playbackId and dStorageUrl will be present, depending on the query.
 *
 */
export declare class ViewershipMetric extends SpeakeasyBase {
    /**
     * The playback ID associated with the metric
     */
    playbackId?: string;
    /**
     * The ID of the creator associated with the metric
     */
    creatorId?: string;
    /**
     * The ID of the viewer associated with the metric
     */
    viewerId?: string;
    /**
     * The URL of the distributed storage used for the asset
     */
    dStorageUrl?: string;
    /**
     * Timestamp (in milliseconds) when the metric was recorded. If the
     *
     * @remarks
     * query contains a time step, this timestamp will point to the
     * beginning of the time step period.
     *
     */
    timestamp?: number;
    /**
     * The device used by the viewer
     */
    device?: string;
    /**
     * The type of the device used by the viewer
     */
    deviceType?: string;
    /**
     * The CPU used by the viewer's device
     */
    cpu?: string;
    /**
     * The operating system used by the viewer
     */
    os?: string;
    /**
     * The browser used by the viewer
     */
    browser?: string;
    /**
     * The browser engine used by the viewer's browser
     */
    browserEngine?: string;
    /**
     * The continent where the viewer is located
     */
    continent?: string;
    /**
     * The country where the viewer is located
     */
    country?: string;
    /**
     * The subdivision (e.g., state or province) where the viewer is
     *
     * @remarks
     * located
     *
     */
    subdivision?: string;
    /**
     * The timezone where the viewer is located
     */
    timezone?: string;
    /**
     * Geographic encoding of the viewers location. Accurate to 3 digits.
     */
    geohas?: string;
    /**
     * The number of views for the asset
     */
    viewCount: number;
    /**
     * The total playtime in minutes for the asset
     */
    playtimeMins: number;
    /**
     * The time-to-first-frame (TTFF) in milliseconds
     */
    ttffMs?: number;
    /**
     * The rebuffering ratio for the asset
     */
    rebufferRatio?: number;
    /**
     * The error rate for the asset
     */
    errorRate?: number;
    /**
     * The percentage of sessions that existed before the asset started
     *
     * @remarks
     * playing
     *
     */
    exitsBeforeStart?: number;
}
