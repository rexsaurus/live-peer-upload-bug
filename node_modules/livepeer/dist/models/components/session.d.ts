import { SpeakeasyBase } from "../../internal/utils";
import { FfmpegProfile } from "./ffmpegprofile";
/**
 * Status of the recording process of this stream session.
 */
export declare enum RecordingStatus {
    Waiting = "waiting",
    Ready = "ready",
    None = "none"
}
export declare class Session extends SpeakeasyBase {
    id?: string;
    name: string;
    lastSeen?: number;
    sourceSegments?: number;
    transcodedSegments?: number;
    /**
     * Duration of all the source segments, sec
     */
    sourceSegmentsDuration?: number;
    /**
     * Duration of all the transcoded segments, sec
     */
    transcodedSegmentsDuration?: number;
    sourceBytes?: number;
    transcodedBytes?: number;
    /**
     * Rate at which sourceBytes increases (bytes/second)
     */
    ingestRate?: number;
    /**
     * Rate at which transcodedBytes increases (bytes/second)
     */
    outgoingRate?: number;
    /**
     * Indicates whether the stream is healthy or not.
     */
    isHealthy?: boolean;
    /**
     * A string array of human-readable errors describing issues affecting
     *
     * @remarks
     * the stream, if any.
     *
     */
    issues?: string[];
    /**
     * Timestamp (in milliseconds) at which the stream object was created
     */
    createdAt?: number;
    /**
     * Points to the parent stream object
     */
    parentId?: string;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    record?: boolean;
    /**
     * Status of the recording process of this stream session.
     */
    recordingStatus?: RecordingStatus;
    /**
     * URL for accessing the recording of this stream session.
     */
    recordingUrl?: string;
    /**
     * URL for the stream session recording packaged in an mp4.
     */
    mp4Url?: string;
    /**
     * Used to form the playback URL
     */
    playbackId?: string;
    profiles?: FfmpegProfile[];
}
