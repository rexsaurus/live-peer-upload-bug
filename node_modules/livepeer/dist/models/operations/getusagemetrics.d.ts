import { SpeakeasyBase } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";
/**
 * The time step to aggregate viewership metrics by
 *
 * @remarks
 *
 */
export declare enum GetUsageMetricsQueryParamTimeStep {
    Hour = "hour",
    Day = "day"
}
export declare class GetUsageMetricsRequest extends SpeakeasyBase {
    /**
     * Start millis timestamp for the query range (inclusive)
     *
     * @remarks
     *
     */
    from?: number;
    /**
     * End millis timestamp for the query range (exclusive)
     *
     * @remarks
     *
     */
    to?: number;
    /**
     * The time step to aggregate viewership metrics by
     *
     * @remarks
     *
     */
    timeStep?: GetUsageMetricsQueryParamTimeStep;
    /**
     * The creator ID to filter the query results
     *
     * @remarks
     *
     */
    creatorId?: string;
}
export declare class GetUsageMetricsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: AxiosResponse;
    /**
     * A Usage Metric object
     */
    usageMetric?: components.UsageMetric;
}
