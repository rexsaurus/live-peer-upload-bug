import { SpeakeasyBase } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";
/**
 * The time step to aggregate viewership metrics by
 */
export declare enum QueryParamTimeStep {
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year"
}
export declare enum QueryParamBreakdownBy {
    DeviceType = "deviceType",
    Device = "device",
    Cpu = "cpu",
    Os = "os",
    Browser = "browser",
    BrowserEngine = "browserEngine",
    Continent = "continent",
    Country = "country",
    Subdivision = "subdivision",
    Timezone = "timezone",
    ViewerId = "viewerId"
}
export declare class GetCreatorMetricsRequest extends SpeakeasyBase {
    /**
     * Start timestamp for the query range (inclusive)
     */
    from?: any;
    /**
     * End timestamp for the query range (exclusive)
     */
    to?: any;
    /**
     * The time step to aggregate viewership metrics by
     */
    timeStep?: QueryParamTimeStep;
    /**
     * The asset ID to filter metrics for
     */
    assetId?: string;
    /**
     * The stream ID to filter metrics for
     */
    streamId?: string;
    /**
     * The creator ID to filter the query results
     */
    creatorId?: string;
    /**
     * The list of fields to break down the query results. Specify this
     *
     * @remarks
     * query-string multiple times to break down by multiple fields.
     *
     */
    breakdownBy?: QueryParamBreakdownBy[];
}
export declare class GetCreatorMetricsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: AxiosResponse;
    /**
     * A list of Metric objects
     */
    data?: components.ViewershipMetric[];
}
